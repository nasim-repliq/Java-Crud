Java JDBC CRUD Application - Step by Step Guide
This guide will walk you through creating a basic Java application with JDBC for performing CRUD (Create, Read, Update, Delete) operations on a database.

Prerequisites
Java Development Kit (JDK) 8 or later installed

A database system (we'll use MySQL in this example)

A Java IDE (Eclipse, IntelliJ, or VS Code)

Step 1: Set Up the Database
Install MySQL if you haven't already

Create a database and table:

sql
CREATE DATABASE employee_db;

USE employee_db;

CREATE TABLE employees (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    position VARCHAR(100),
    salary DECIMAL(10,2)
);
Step 2: Create a Java Project
Create a new Java project in your IDE

Add the MySQL JDBC driver to your project:

Download the MySQL Connector/J driver from https://dev.mysql.com/downloads/connector/j/

Add the JAR file to your project's build path

Step 3: Create the Database Connection Class
Create a new class DatabaseConnection.java:

java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static final String URL = "jdbc:mysql://localhost:3306/employee_db";
    private static final String USER = "your_username";
    private static final String PASSWORD = "your_password";
    
    public static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
}
Step 4: Create the Employee Model Class
Create Employee.java:

java
public class Employee {
    private int id;
    private String name;
    private String position;
    private double salary;
    
    // Constructors
    public Employee() {}
    
    public Employee(String name, String position, double salary) {
        this.name = name;
        this.position = position;
        this.salary = salary;
    }
    
    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getPosition() { return position; }
    public void setPosition(String position) { this.position = position; }
    public double getSalary() { return salary; }
    public void setSalary(double salary) { this.salary = salary; }
    
    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Position: " + position + ", Salary: " + salary;
    }
}
Step 5: Create the CRUD Operations Class
Create EmployeeDAO.java (DAO = Data Access Object):

java
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class EmployeeDAO {
    // Create
    public void addEmployee(Employee employee) throws SQLException {
        String sql = "INSERT INTO employees (name, position, salary) VALUES (?, ?, ?)";
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setString(1, employee.getName());
            stmt.setString(2, employee.getPosition());
            stmt.setDouble(3, employee.getSalary());
            stmt.executeUpdate();
        }
    }
    
    // Read (all employees)
    public List<Employee> getAllEmployees() throws SQLException {
        List<Employee> employees = new ArrayList<>();
        String sql = "SELECT * FROM employees";
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            
            while (rs.next()) {
                Employee employee = new Employee();
                employee.setId(rs.getInt("id"));
                employee.setName(rs.getString("name"));
                employee.setPosition(rs.getString("position"));
                employee.setSalary(rs.getDouble("salary"));
                employees.add(employee);
            }
        }
        return employees;
    }
    
    // Read (single employee by ID)
    public Employee getEmployeeById(int id) throws SQLException {
        String sql = "SELECT * FROM employees WHERE id = ?";
        Employee employee = null;
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    employee = new Employee();
                    employee.setId(rs.getInt("id"));
                    employee.setName(rs.getString("name"));
                    employee.setPosition(rs.getString("position"));
                    employee.setSalary(rs.getDouble("salary"));
                }
            }
        }
        return employee;
    }
    
    // Update
    public void updateEmployee(Employee employee) throws SQLException {
        String sql = "UPDATE employees SET name = ?, position = ?, salary = ? WHERE id = ?";
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setString(1, employee.getName());
            stmt.setString(2, employee.getPosition());
            stmt.setDouble(3, employee.getSalary());
            stmt.setInt(4, employee.getId());
            stmt.executeUpdate();
        }
    }
    
    // Delete
    public void deleteEmployee(int id) throws SQLException {
        String sql = "DELETE FROM employees WHERE id = ?";
        
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }
}
Step 6: Create a Main Class to Test the Application
Create MainApp.java:

java
import java.sql.SQLException;
import java.util.List;

public class MainApp {
    public static void main(String[] args) {
        EmployeeDAO employeeDAO = new EmployeeDAO();
        
        try {
            // Create
            Employee emp1 = new Employee("John Doe", "Developer", 75000);
            Employee emp2 = new Employee("Jane Smith", "Manager", 90000);
            employeeDAO.addEmployee(emp1);
            employeeDAO.addEmployee(emp2);
            
            // Read all
            System.out.println("All Employees:");
            List<Employee> employees = employeeDAO.getAllEmployees();
            employees.forEach(System.out::println);
            
            // Read single
            System.out.println("\nEmployee with ID 1:");
            Employee employee = employeeDAO.getEmployeeById(1);
            System.out.println(employee);
            
            // Update
            employee.setSalary(80000);
            employeeDAO.updateEmployee(employee);
            System.out.println("\nAfter update:");
            System.out.println(employeeDAO.getEmployeeById(1));
            
            // Delete
            employeeDAO.deleteEmployee(2);
            System.out.println("\nAfter deletion:");
            employeeDAO.getAllEmployees().forEach(System.out::println);
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
Step 7: Run the Application
Run the MainApp class

You should see output showing the CRUD operations being performed

Key Points to Remember:
Connection Management: We use try-with-resources to automatically close connections, statements, and result sets

Prepared Statements: Always use prepared statements to prevent SQL injection

Error Handling: Proper error handling is important in real applications

Configuration: Store database credentials in a configuration file (not hardcoded) in production